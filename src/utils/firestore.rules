rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if user is app admin
    function isAppAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Check if user is team admin or app admin
    function isTeamAdminOrAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['team_admin', 'admin'];
    }

    // Check if user is on same team as the target user
    function isSameTeam(userId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId ==
        get(/databases/$(database)/documents/users/$(userId)).data.teamId;
    }

    // Users collection
    match /users/{userId} {
      // Allow anyone to check if a userName exists
      allow get: if resource.data.keys().hasOnly(['userName']);

      // Allow users to manage their own profile
      allow read, write: if request.auth.uid == userId;

      // Allow app admins to read all users
      allow read: if isAppAdmin();

      // Allow creating a user document at registration
      allow create: if request.auth.uid == userId;

      // Allow team admins to update users on the same team
      allow update: if request.auth.uid == userId || (isTeamAdminOrAdmin() && isSameTeam(userId));
      
      // Allow app admins to update any user
      allow update: if isAppAdmin();
    }

    // Teams collection
    match /teams/{teamId} {
      // Check if user is an admin of this team
      function isAdminForTeam() {
        return request.auth.uid in resource.data.adminIds ||
               (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }

      // Allow public reads during registration and for members/admins
      allow read: if true || (
        isSignedIn() &&
        (
          request.auth.uid in resource.data.memberIds ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId
        )
      );

      // Allow app admins to read all teams
      allow read: if isAppAdmin();

      // Allow authenticated users to create teams for which they are an admin
      allow create: if isSignedIn() &&
        request.auth.uid in request.resource.data.adminIds;

      // Allow team admins to update their team
      allow update: if isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId == teamId &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['team_admin', 'admin'];

      // Allow admin-level writes
      allow write: if isSignedIn() && isAdminForTeam();
    }

    // Mile logs collection
    match /mileLogs/{logId} {
      // Users can read or write their own logs
      allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;

      // App admins can read all logs (for statistics)
      allow read: if isAppAdmin();

      // Creation must match the authenticated user
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Invitations collection
    match /invitations/{email} {
      // Public read allowed for registration checks
      allow read: if true;

      // App admins can read all invitations
      allow read: if isAppAdmin();

      // Only team or app admins can create or delete
      allow create, delete: if isTeamAdminOrAdmin();

      // Restrict update to the user matching the invitation email
      allow update: if isSignedIn() && request.auth.token.email == email;
    }

    // Leaderboards collection
    match /leaderboards/{leaderboardId} {
      allow read: if isSignedIn();

      // Only app admins can write to leaderboards
      allow write: if isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Competitions collection
    match /competitions/{competitionId} {
      allow read: if isSignedIn();

      // Only app admins can write competitions
      allow write: if isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Catch-all rule to deny access to undefined documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}